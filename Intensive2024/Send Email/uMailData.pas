// This unit is autogenerated. Do not edit it manually.
// Source: C:\Users\Fernando\Documents\Embarcadero\Studio\Projects\SendEmail\json.txt
// Date: 1/17/2024 2:06:05 PM

unit uMailData;

interface

uses
  System.Classes, System.JSON.Serializers, System.Generics.Collections, System.JSON.Converters, System.JSON;

type
  TToRecipient = class;
  TCcRecipient = class;
  TMailData = class;

  TJsonListConverterTToRecipient = class(TJsonListConverter<TToRecipient>);
  TJsonListConverterTCcRecipient = class(TJsonListConverter<TCcRecipient>);
  TJsonListConverterTMailData = class(TJsonListConverter<TMailData>);

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TEmailAddress = class(TPersistent)
  private
    Faddress: string;
    function Getaddress: string;
    procedure Setaddress(const AValue: string);
  public
    property address: string read Getaddress write Setaddress;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TEmailAddress_1 = class(TPersistent)
  private
    Faddress: string;
    function Getaddress: string;
    procedure Setaddress(const AValue: string);
  public
    property address: string read Getaddress write Setaddress;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TBody = class(TPersistent)
  private
    FcontentType: string;
    Fcontent: string;
    function GetcontentType: string;
    procedure SetcontentType(const AValue: string);
    function Getcontent: string;
    procedure Setcontent(const AValue: string);
  public
    property contentType: string read GetcontentType write SetcontentType;
    property content: string read Getcontent write Setcontent;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TToRecipient = class(TPersistent)
  private
    FemailAddress: TEmailAddress;
    function GetemailAddress: TEmailAddress;
  public
    constructor Create;
    destructor Destroy; override;
    property emailAddress: TEmailAddress read GetemailAddress;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TCcRecipient = class(TPersistent)
  private
    FemailAddress: TEmailAddress_1;
    function GetemailAddress: TEmailAddress_1;
  public
    constructor Create;
    destructor Destroy; override;
    property emailAddress: TEmailAddress_1 read GetemailAddress;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TMessage = class(TPersistent)
  private
    Fsubject: string;
    Fbody: TBody;
    FtoRecipients: TObjectList<TToRecipient>;
    FccRecipients: TObjectList<TCcRecipient>;
    function Getsubject: string;
    procedure Setsubject(const AValue: string);
    function Getbody: TBody;
    function GettoRecipients: TObjectList<TToRecipient>;
    function GetccRecipients: TObjectList<TCcRecipient>;
  public
    constructor Create;
    destructor Destroy; override;
    property subject: string read Getsubject write Setsubject;
    property body: TBody read Getbody;
    [JsonConverter(TJsonListConverterTToRecipient)]
    property toRecipients: TObjectList<TToRecipient> read GettoRecipients;
    [JsonConverter(TJsonListConverterTCcRecipient)]
    property ccRecipients: TObjectList<TCcRecipient> read GetccRecipients;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TMailData = class(TPersistent)
  private
    Fmessage: TMessage;
    FsaveToSentItems: Boolean;
    function Getmessage: TMessage;
    function GetsaveToSentItems: Boolean;
    procedure SetsaveToSentItems(const AValue: Boolean);
  public
    constructor Create;
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONValue): TMailData; overload; static;
    class function FromJSON(const AValue: string): TMailData; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property message: TMessage read Getmessage;
    property saveToSentItems: Boolean read GetsaveToSentItems write SetsaveToSentItems;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  Mail = class(TPersistent)
  private
    FDataset: TObjectList<TMailData>;
    function GetDataset: TObjectList<TMailData>;
  public
    constructor Create;
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONArray): Mail; overload; static;
    class function FromJSON(const AValue: string): Mail; overload; static;
    function ToJSONArray: TJSONArray;
    function ToJSONString: string;
    [JsonConverter(TJsonListConverterTMailData)]
    property Dataset: TObjectList<TMailData> read GetDataset;
  end;

implementation

uses
  System.SysUtils;

function TEmailAddress.Getaddress: string;
begin
  Result := Faddress;
end;

procedure TEmailAddress.Setaddress(const AValue: string);
begin
  Faddress := AValue;
end;

function TEmailAddress_1.Getaddress: string;
begin
  Result := Faddress;
end;

procedure TEmailAddress_1.Setaddress(const AValue: string);
begin
  Faddress := AValue;
end;

function TBody.GetcontentType: string;
begin
  Result := FcontentType;
end;

procedure TBody.SetcontentType(const AValue: string);
begin
  FcontentType := AValue;
end;

function TBody.Getcontent: string;
begin
  Result := Fcontent;
end;

procedure TBody.Setcontent(const AValue: string);
begin
  Fcontent := AValue;
end;

constructor TToRecipient.Create;
begin
  inherited Create;
  FemailAddress := TEmailAddress.Create;
end;

destructor TToRecipient.Destroy;
begin
  FreeAndNil(FemailAddress);
  inherited Destroy;
end;

function TToRecipient.GetemailAddress: TEmailAddress;
begin
  Result := FemailAddress;
end;

constructor TCcRecipient.Create;
begin
  inherited Create;
  FemailAddress := TEmailAddress_1.Create;
end;

destructor TCcRecipient.Destroy;
begin
  FreeAndNil(FemailAddress);
  inherited Destroy;
end;

function TCcRecipient.GetemailAddress: TEmailAddress_1;
begin
  Result := FemailAddress;
end;

constructor TMessage.Create;
begin
  inherited Create;
  Fbody := TBody.Create;
  FtoRecipients := TObjectList<TToRecipient>.Create(True);
  FccRecipients := TObjectList<TCcRecipient>.Create(True);
end;

destructor TMessage.Destroy;
begin
  FreeAndNil(Fbody);
  FreeAndNil(FtoRecipients);
  FreeAndNil(FccRecipients);
  inherited Destroy;
end;

function TMessage.Getsubject: string;
begin
  Result := Fsubject;
end;

procedure TMessage.Setsubject(const AValue: string);
begin
  Fsubject := AValue;
end;

function TMessage.Getbody: TBody;
begin
  Result := Fbody;
end;

function TMessage.GettoRecipients: TObjectList<TToRecipient>;
begin
  Result := FtoRecipients;
end;

function TMessage.GetccRecipients: TObjectList<TCcRecipient>;
begin
  Result := FccRecipients;
end;

constructor TMailData.Create;
begin
  inherited Create;
  Fmessage := TMessage.Create;
end;

destructor TMailData.Destroy;
begin
  FreeAndNil(Fmessage);
  inherited Destroy;
end;

function TMailData.Getmessage: TMessage;
begin
  Result := Fmessage;
end;

function TMailData.GetsaveToSentItems: Boolean;
begin
  Result := FsaveToSentItems;
end;

procedure TMailData.SetsaveToSentItems(const AValue: Boolean);
begin
  FsaveToSentItems := AValue;
end;

class function TMailData.FromJSON(const AValue: TJSONValue): TMailData;
begin
  Result := TJSONMapper<TMailData>.Default.FromObject(AValue);
end;

class function TMailData.FromJSON(const AValue: string): TMailData;
begin
  Result := TJSONMapper<TMailData>.Default.FromObject(AValue);
end;

function TMailData.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<TMailData>.Default.ToObject(Self);
end;

function TMailData.ToJSONString: string;
begin
  Result := TJSONMapper<TMailData>.Default.ToString(Self);
end;

constructor Mail.Create;
begin
  inherited Create;
  FDataset := TObjectList<TMailData>.Create(True);
end;

destructor Mail.Destroy;
begin
  FreeAndNil(FDataset);
  inherited Destroy;
end;

function Mail.GetDataset: TObjectList<TMailData>;
begin
  Result := FDataset;
end;

class function Mail.FromJSON(const AValue: TJSONArray): Mail;
begin
  var LArr := TJSONMapper<TMailData>.Default.FromArray(AValue);
  Result := Mail.Create;
  Result.Dataset.AddRange(LArr);
end;

class function Mail.FromJSON(const AValue: string): Mail;
begin
  var LArr := TJSONMapper<TMailData>.Default.FromArray(AValue);
  Result := Mail.Create;
  Result.Dataset.AddRange(LArr);
end;

function Mail.ToJSONArray: TJSONArray;
begin
  Result := TJSONMapper<TMailData>.Default.ToArray(Dataset.List, Dataset.Count);
end;

function Mail.ToJSONString: string;
begin
  Result := TJSONMapper<TMailData>.Default.ToString(Dataset.List, Dataset.Count);
end;

initialization

  RegisterClass(TEmailAddress);
  RegisterClass(TEmailAddress_1);
  RegisterClass(TBody);
  RegisterClass(TToRecipient);
  RegisterClass(TCcRecipient);
  RegisterClass(TMessage);
  RegisterClass(TMailData);
  RegisterClass(Mail);

end.
