// This unit is autogenerated. Do not edit it manually.
// Source: https://jsonplaceholder.typicode.com/users
// Date: 10/1/2023 10:37:49 PM

unit uJsonMapping;

interface

uses
  System.Classes, System.JSON.Serializers, System.JSON;

type
  [JsonSerialize(TJsonMemberSerialization.Public)]
  TGeo = class(TPersistent)
  private
    Flat: Double;
    Flng: Double;
    function Getlat: Double;
    procedure Setlat(const AValue: Double);
    function Getlng: Double;
    procedure Setlng(const AValue: Double);
  public
    property lat: Double read Getlat write Setlat;
    property lng: Double read Getlng write Setlng;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TAddress = class(TPersistent)
  private
    Fstreet: string;
    Fsuite: string;
    Fcity: string;
    Fzipcode: string;
    Fgeo: TGeo;
    function Getstreet: string;
    procedure Setstreet(const AValue: string);
    function Getsuite: string;
    procedure Setsuite(const AValue: string);
    function Getcity: string;
    procedure Setcity(const AValue: string);
    function Getzipcode: string;
    procedure Setzipcode(const AValue: string);
    function Getgeo: TGeo;
  public
    constructor Create;
    destructor Destroy; override;
    property street: string read Getstreet write Setstreet;
    property suite: string read Getsuite write Setsuite;
    property city: string read Getcity write Setcity;
    property zipcode: string read Getzipcode write Setzipcode;
    property geo: TGeo read Getgeo;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TCompany = class(TPersistent)
  private
    Fname: string;
    FcatchPhrase: string;
    Fbs: string;
    function Getname: string;
    procedure Setname(const AValue: string);
    function GetcatchPhrase: string;
    procedure SetcatchPhrase(const AValue: string);
    function Getbs: string;
    procedure Setbs(const AValue: string);
  public
    property name: string read Getname write Setname;
    property catchPhrase: string read GetcatchPhrase write SetcatchPhrase;
    property bs: string read Getbs write Setbs;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  TUserData = class(TPersistent)
  private
    Fid: Integer;
    Fname: string;
    Fusername: string;
    Femail: string;
    Faddress: TAddress;
    Fphone: string;
    Fwebsite: string;
    Fcompany: TCompany;
    function Getid: Integer;
    procedure Setid(const AValue: Integer);
    function Getname: string;
    procedure Setname(const AValue: string);
    function Getusername: string;
    procedure Setusername(const AValue: string);
    function Getemail: string;
    procedure Setemail(const AValue: string);
    function Getaddress: TAddress;
    function Getphone: string;
    procedure Setphone(const AValue: string);
    function Getwebsite: string;
    procedure Setwebsite(const AValue: string);
    function Getcompany: TCompany;
  public
    constructor Create;
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONValue): TUserData; overload; static;
    class function FromJSON(const AValue: string): TUserData; overload; static;
    function ToJSONObject: TJSONValue;
    function ToJSONString: string;
    property id: Integer read Getid write Setid;
    property name: string read Getname write Setname;
    property username: string read Getusername write Setusername;
    property email: string read Getemail write Setemail;
    property address: TAddress read Getaddress;
    property phone: string read Getphone write Setphone;
    property website: string read Getwebsite write Setwebsite;
    property company: TCompany read Getcompany;
  end;

  [JsonSerialize(TJsonMemberSerialization.Public)]
  Users = class(TPersistent)
  private
    FDataset: TArray<TUserData>;
    function GetDataset: TArray<TUserData>;
    procedure SetDataset(const AValue: TArray<TUserData>);
  public
    destructor Destroy; override;
    class function FromJSON(const AValue: TJSONArray): Users; overload; static;
    class function FromJSON(const AValue: string): Users; overload; static;
    function ToJSONArray: TJSONArray;
    function ToJSONString: string;
    property Dataset: TArray<TUserData> read GetDataset write SetDataset;
  end;

implementation

uses
  System.Generics.Collections, System.SysUtils;

function TGeo.Getlat: Double;
begin
  Result := Flat;
end;

procedure TGeo.Setlat(const AValue: Double);
begin
  Flat := AValue;
end;

function TGeo.Getlng: Double;
begin
  Result := Flng;
end;

procedure TGeo.Setlng(const AValue: Double);
begin
  Flng := AValue;
end;

constructor TAddress.Create;
begin
  inherited Create;
  Fgeo := TGeo.Create;
end;

destructor TAddress.Destroy;
begin
  FreeAndNil(Fgeo);
  inherited Destroy;
end;

function TAddress.Getstreet: string;
begin
  Result := Fstreet;
end;

procedure TAddress.Setstreet(const AValue: string);
begin
  Fstreet := AValue;
end;

function TAddress.Getsuite: string;
begin
  Result := Fsuite;
end;

procedure TAddress.Setsuite(const AValue: string);
begin
  Fsuite := AValue;
end;

function TAddress.Getcity: string;
begin
  Result := Fcity;
end;

procedure TAddress.Setcity(const AValue: string);
begin
  Fcity := AValue;
end;

function TAddress.Getzipcode: string;
begin
  Result := Fzipcode;
end;

procedure TAddress.Setzipcode(const AValue: string);
begin
  Fzipcode := AValue;
end;

function TAddress.Getgeo: TGeo;
begin
  Result := Fgeo;
end;

function TCompany.Getname: string;
begin
  Result := Fname;
end;

procedure TCompany.Setname(const AValue: string);
begin
  Fname := AValue;
end;

function TCompany.GetcatchPhrase: string;
begin
  Result := FcatchPhrase;
end;

procedure TCompany.SetcatchPhrase(const AValue: string);
begin
  FcatchPhrase := AValue;
end;

function TCompany.Getbs: string;
begin
  Result := Fbs;
end;

procedure TCompany.Setbs(const AValue: string);
begin
  Fbs := AValue;
end;

constructor TUserData.Create;
begin
  inherited Create;
  Faddress := TAddress.Create;
  Fcompany := TCompany.Create;
end;

destructor TUserData.Destroy;
begin
  FreeAndNil(Faddress);
  FreeAndNil(Fcompany);
  inherited Destroy;
end;

function TUserData.Getid: Integer;
begin
  Result := Fid;
end;

procedure TUserData.Setid(const AValue: Integer);
begin
  Fid := AValue;
end;

function TUserData.Getname: string;
begin
  Result := Fname;
end;

procedure TUserData.Setname(const AValue: string);
begin
  Fname := AValue;
end;

function TUserData.Getusername: string;
begin
  Result := Fusername;
end;

procedure TUserData.Setusername(const AValue: string);
begin
  Fusername := AValue;
end;

function TUserData.Getemail: string;
begin
  Result := Femail;
end;

procedure TUserData.Setemail(const AValue: string);
begin
  Femail := AValue;
end;

function TUserData.Getaddress: TAddress;
begin
  Result := Faddress;
end;

function TUserData.Getphone: string;
begin
  Result := Fphone;
end;

procedure TUserData.Setphone(const AValue: string);
begin
  Fphone := AValue;
end;

function TUserData.Getwebsite: string;
begin
  Result := Fwebsite;
end;

procedure TUserData.Setwebsite(const AValue: string);
begin
  Fwebsite := AValue;
end;

function TUserData.Getcompany: TCompany;
begin
  Result := Fcompany;
end;

class function TUserData.FromJSON(const AValue: TJSONValue): TUserData;
begin
  Result := TJSONMapper<TUserData>.Default.FromObject(AValue);
end;

class function TUserData.FromJSON(const AValue: string): TUserData;
begin
  Result := TJSONMapper<TUserData>.Default.FromObject(AValue);
end;

function TUserData.ToJSONObject: TJSONValue;
begin
  Result := TJSONMapper<TUserData>.Default.ToObject(Self);
end;

function TUserData.ToJSONString: string;
begin
  Result := TJSONMapper<TUserData>.Default.ToString(Self);
end;

destructor Users.Destroy;
begin
  TArray.FreeValues<TUserData>(FDataset);
  inherited Destroy;
end;

function Users.GetDataset: TArray<TUserData>;
begin
  Result := FDataset;
end;

procedure Users.SetDataset(const AValue: TArray<TUserData>);
begin
  FDataset := AValue;
end;

class function Users.FromJSON(const AValue: TJSONArray): Users;
begin
  var LArr := TJSONMapper<TUserData>.Default.FromArray(AValue);
  Result := Users.Create;
  Result.Dataset := LArr;
end;

class function Users.FromJSON(const AValue: string): Users;
begin
  var LArr := TJSONMapper<TUserData>.Default.FromArray(AValue);
  Result := Users.Create;
  Result.Dataset := LArr;
end;

function Users.ToJSONArray: TJSONArray;
begin
  Result := TJSONMapper<TUserData>.Default.ToArray(Dataset);
end;

function Users.ToJSONString: string;
begin
  Result := TJSONMapper<TUserData>.Default.ToString(Dataset);
end;

initialization

  RegisterClass(TGeo);
  RegisterClass(TAddress);
  RegisterClass(TCompany);
  RegisterClass(TUserData);
  RegisterClass(Users);

end.
